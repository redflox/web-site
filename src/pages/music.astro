---
import MainLayout from "@layouts/MainLayout.astro";

const backendUrl = import.meta.env.PUBLIC_API_BASE_URL;

// ✅ Función de carga resiliente con manejo de errores
async function fetchData(endpoint: string) {
  try {
    const url = `${backendUrl}/${endpoint}`;
    console.log(`Fetching: ${url}`);
    const res = await fetch(url);

    if (!res.ok) throw new Error(`Error en ${endpoint}: ${res.status}`);

    return await res.json();
  } catch (error) {
    console.error(error);
    return null; // Devuelve null en caso de fallo
  }
}

// ✅ Cargar todas las peticiones en paralelo con Promise.all
const [lastPlayed, topArtists, recentlyPlayed, topTracks] = await Promise.all([
  fetchData("spotify/last-played"),
  fetchData("spotify/top-artists"),
  fetchData("spotify/recently-played"),
  fetchData("spotify/top-tracks"),
]);

const initialTrackId = lastPlayed ? lastPlayed.id : null;

// Función para calcular el tiempo transcurrido
function timeAgo(dateString: string) {
  const now: Date = new Date();
  const playedTime: Date = new Date(dateString);
  const diffMs = now.getTime() - playedTime.getTime(); // Diferencia en milisegundos

  const seconds = Math.floor(diffMs / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);

  if (days > 0) return `${days} día${days !== 1 ? "s" : ""} atrás`;
  if (hours > 0) return `${hours} hora${hours !== 1 ? "s" : ""} atrás`;
  if (minutes > 0) return `${minutes} minuto${minutes !== 1 ? "s" : ""} atrás`;
  return `${seconds} segundo${seconds !== 1 ? "s" : ""} atrás`;
}
---

<MainLayout>
  <div class="relative max-w-[var(--page-width)] mx-auto pointer-events-auto">
    <div
      class="transition duration-700 w-full left-0 right-0 mx-auto gap-4 px-0 md:px-4 onload-animation"
    >
      <!-- ✅ Reproductor -->
      <section
        class="bg-[var(--card-bg)] p-6 rounded-[var(--radius-large)] shadow-md"
      >
        <h2
          class="text-2xl font-semibold text-[var(--primary)] dark:text-neutral-50"
        >
          Reproductor
        </h2>
        <iframe
          id="spotify-player"
          src={`https://open.spotify.com/embed/track/${initialTrackId}?autoplay=1`}
          width="100%"
          height="80"
          style="border: none;"
          allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
          class="rounded-lg mt-4 shadow-md bg-[var(--btn-regular-bg)] dark:bg-[var(--btn-regular-bg-active)]"
        ></iframe>
      </section>

      <!-- ✅ Última Canción Escuchada -->
      {
        lastPlayed && (
          <section class="mt-4 bg-[var(--card-bg)] p-6 rounded-[var(--radius-large)] shadow-md">
            <h2 class="text-2xl font-semibold text-[var(--primary)] dark:text-neutral-50">
              Última Canción Escuchada
            </h2>
            <div
              class="flex items-center gap-4 p-4 bg-[var(--btn-regular-bg)] rounded-lg hover:bg-[var(--btn-regular-bg-hover)] cursor-pointer transition"
              data-type="track"
              data-id={lastPlayed.id}
            >
              <img
                src={lastPlayed.album.images[0].url}
                alt={lastPlayed.album.name}
                class="w-20 h-20 rounded-md"
              />
              <div>
                <p class="text-lg font-bold text-[var(--deep-text)] dark:text-neutral-50">
                  {lastPlayed.name}
                </p>
                <p class="text-sm text-[var(--meta-divider)] dark:text-gray-300">
                  de{" "}
                  <a
                    href={lastPlayed.artists[0].external_urls.spotify}
                    target="_blank"
                    class="text-[var(--primary)] hover:underline"
                  >
                    {lastPlayed.artists[0].name}
                  </a>
                </p>
              </div>
            </div>
          </section>
        )
      }

      {
        recentlyPlayed && (
          // Ultimas canciones que escuche
          <section class="mt-4 bg-[var(--card-bg)] p-6 rounded-[var(--radius-large)] shadow-md">
            <h2 class="text-2xl font-semibold text-[var(--primary)] dark:text-neutral-50">
              Ultimas Canciones Escuchadas
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
              {recentlyPlayed
                .sort(
                  (a: any, b: any) =>
                    new Date(b.played_at).getTime() -
                    new Date(a.played_at).getTime()
                )
                .map((data: any) => (
                  <div
                    class="flex items-center gap-4 p-4 rounded-lg hover:bg-[var(--btn-card-bg-hover)] bg-[var(--btn-regular-bg)] transition cursor-pointer"
                    data-type="track"
                    data-id={data.track.id}
                  >
                    <img
                      src={
                        data.track.album.images[0].url
                          ? data.track.album.images[0].url
                          : "https://via.placeholder.com/150"
                      }
                      alt={data.track.name}
                      class="w-16 h-16 rounded-md"
                    />
                    <div>
                      <p class="text-[var(--deep-text)] font-bold dark:text-neutral-50">
                        {data.track.name}
                      </p>
                      <p class="text-sm text-[var(--primary)]">
                        {data.track.artists[0].name}
                      </p>
                      <p class="text-sm text-[var(--meta-divider)] dark:text-gray-300">
                        {timeAgo(data.played_at)}
                      </p>
                    </div>
                  </div>
                ))}
            </div>
          </section>
        )
      }

      <!-- ✅ Top Canciones -->
      {
        topTracks && (
          <section class="mt-4 bg-[var(--card-bg)] p-6 rounded-[var(--radius-large)] shadow-md">
            <h2 class="text-2xl font-semibold text-[var(--primary)] dark:text-neutral-50">
              Top Canciones
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
              {topTracks.map((track: any) => (
                <div
                  class="flex items-center gap-4 p-4 rounded-lg hover:bg-[var(--btn-card-bg-hover)] bg-[var(--btn-regular-bg)] transition cursor-pointer"
                  data-type="track"
                  data-id={track.id}
                >
                  <img
                    src={track.album.images[0].url}
                    alt={track.name}
                    class="w-16 h-16 rounded-md"
                  />
                  <div>
                    <p class="text-[var(--deep-text)] font-bold dark:text-neutral-50">
                      {track.name}
                    </p>
                    <p class="text-sm text-[var(--primary)]">
                      {track.artists[0].name}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </section>
        )
      }

      <!-- ✅ Top Artistas -->
      {
        topArtists && (
          <section class="mt-4 bg-[var(--card-bg)] p-6 rounded-[var(--radius-large)] shadow-md mb-10">
            <h2 class="text-2xl font-semibold text-[var(--primary)] dark:text-neutral-50">
              Top Artistas
            </h2>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
              {topArtists.items.map((artist: any) => (
                <div
                  class="block p-4 rounded-lg hover:scale-105 transition bg-[var(--btn-regular-bg)] hover:bg-[var(--btn-card-bg-hover)] cursor-pointer"
                  data-type="artist"
                  data-id={artist.id}
                >
                  <img
                    src={artist.images[0].url}
                    alt={artist.name}
                    class="w-full h-32 object-cover rounded-md"
                  />
                  <p class="mt-2 text-[var(--deep-text)] text-center font-bold dark:text-neutral-50">
                    {artist.name}
                  </p>
                </div>
              ))}
            </div>
          </section>
        )
      }
    </div>
  </div>

  <!-- ✅ JavaScript Mejorado con AutoPlay -->
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const player = document.getElementById("spotify-player");

      document.querySelectorAll("[data-type]").forEach((element) => {
        element.addEventListener("click", async function (this: HTMLElement) {
          const type = this.getAttribute("data-type");
          const id = this.getAttribute("data-id");

          if (type === "track") {
            if (player) {
              (player as HTMLIFrameElement).src = `https://open.spotify.com/embed/track/${id}?autoplay=1`;
            }
          } else if (type === "artist" || type === "playlist") {
            window.open(`https://open.spotify.com/${type}/${id}`, "_blank");
          }
        });
      });
    });
  </script>
</MainLayout>
